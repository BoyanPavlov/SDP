Идея и архитектура

А)
SkipList - свързан списък с опция прескачане на n на брой елементи
едносвързан(не съм сигурен) списък с допълнителен pointer - "skipTo"

Програмата приема число>0 и лист от стрингове(само букви)
след това приемаме инфо за директните връзки(какво можем да скипваме)
тук се създава инстанция на SkipList

Искаме най-кратък път обхождащ определени гари, не се изисква валидация на входните данни

тук ще имплементираме Дейкстра(най-кратък път - от, до)
Може и да не е точно това - нямам тегла на ребрата, само преференция и последователност


Б)
Подава се файл:
първи ред - брой обекти && брой връзки 
Списък с обекти (брой връзки) на брой.
Подава се време за харчене в минути

имаме обекти - от - до (различни варианти) и цената между тях
Графът е неориентиран 
Цел да има цикъл в ценовата листа и да покрием максимално много обекти
Връща се последователност от забележителности

-може да се повтарят обекти за се върнем до гарата(стига да има връзка)
-Ако нямаме време за нищо - връщаме само RailStation

В)
class Box
{
string tag;
vector<string> souvenirs;
Box *boxes;
};

тук имаш "свличане" на кутии
ако имаш кутия и в кутията има само друга кутия то горната кутия отпада
и остава само долната нещата в нея "да дрънкат"
